{"version":3,"sources":["components/IdleInputs/SetupFocus.tsx","components/IdleInputs/index.tsx","components/RunningControls/index.tsx","components/CountdownTimer.tsx","components/Status.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Type","ScreenState","SetupFocus","props","useState","goal","setGoal","Work","type","setType","onSubmit","e","preventDefault","startFocus","handleSubmit","autoFocus","placeholder","onChange","target","value","accessKey","Personal","checked","onClick","cancel","IdleInputs","startBreak","shortBreakMinutes","longBreakMinutes","Idle","screenState","setScreenState","Fragment","console","error","CountdownTimer","timeRemaining","totalSecondsRemaining","pastDue","Math","abs","minutesRemaining","floor","secondsRemaining","paddedMinutesRemaining","paddedSecondsRemaining","formatTimeRemaining","end","current","style","fontSize","RunningControls","addDistraction","stopActivity","Default","distractionDescription","setDistractionDescription","DistractionType","Internal","distractionType","setDistractionType","stopTimeString","setStopTimeString","AddingDistraction","StoppingActivity","Date","toLocaleString","External","stopTime","parse","favicon","title","Status","activity","currentTime","icon","scheduledEnd","ActivityType","Focus","newTitle","status","Break","emoji","iconLink","document","querySelector","href","updateFavicon","className","marginBottom","CurrentState","getUnixTime","now","minutesToSeconds","minutes","deepCopy","thing","JSON","stringify","prettifyTimes","key","intervalId","undefined","App","currentState","activities","setActivities","setCurrentTime","currentActivity","setCurrentActivity","useEffect","activitiesJson","localStorage","getItem","parsedActivities","currentActivityJson","parsedActivity","setItem","Focusing","Relaxing","Idling","window","setInterval","newTime","clearInterval","checkedNotificationPermissions","setCheckedNotificationPermissions","Notification","permission","requestPermission","controls","timer","hasNotifiedTimout","setHasNotifiedTimout","requireInteraction","tags","start","distractions","description","activityCopy","push","activitiesCopy","Array","from","reverse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1c74f06.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\ntype SetupFocusProps = {\n    startFocus: (description: string, type: string[])=>void,\n    cancel: ()=>void\n}\n\nenum Type{\n    Personal = \"personal\",\n    Work = \"work\"\n}\n\nexport default function SetupFocus(props : SetupFocusProps) {\n    const [goal, setGoal] = useState(\"\");\n    const [type, setType] = useState(Type.Work);\n\n    function handleSubmit(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        props.startFocus(goal, [type])\n    }\n\n    return(\n        <form onSubmit={e => handleSubmit(e)}>\n            <input autoFocus type=\"text\" placeholder=\"Goal\" onChange={(e)=>setGoal(e.target.value)} value={goal}/>\n            <label accessKey=\"p\"><input type=\"Radio\" value={Type.Personal} checked={type === Type.Personal} onChange={()=>{setType(Type.Personal)}}/><u>P</u>ersonal</label>\n            <label accessKey=\"o\"><input type=\"Radio\" value={Type.Work} checked={type === Type.Work} onChange={()=>{setType(Type.Work)}}/>W<u>o</u>rk</label>\n            <button accessKey=\"s\" type=\"submit\"><u>S</u>tart</button>\n            <button accessKey=\"b\" onClick={props.cancel}><u>B</u>ack</button>\n        </form>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport SetupFocus from './SetupFocus';\n\nenum ScreenState {\n  Idle,\n  SetupFocus,\n}\n\ntype IdleInputsProps = {\n    startFocus: (description: string, type: string[])=>void,\n    startBreak: (duration: number)=>void,\n    shortBreakMinutes: number,\n    longBreakMinutes: number\n}\n\nexport default function IdleInputs(props : IdleInputsProps) {\n    const {startFocus, startBreak, shortBreakMinutes, longBreakMinutes} = props;\n    const [screenState, setScreenState] = useState(ScreenState.Idle);\n    switch(screenState){\n        case ScreenState.Idle:\n            return(\n                <React.Fragment>\n                    <button autoFocus accessKey=\"o\" onClick={() => setScreenState(ScreenState.SetupFocus)}>F<u>o</u>cus</button>\n                    <button accessKey=\"s\" onClick={() => startBreak(shortBreakMinutes)}><u>S</u>hort Break</button>\n                    <button accessKey=\"l\" onClick={() => startBreak(longBreakMinutes)}><u>L</u>ong Break</button>\n                </React.Fragment>\n            );\n        case ScreenState.SetupFocus:\n            return(\n                <SetupFocus startFocus={startFocus} cancel={()=>setScreenState(ScreenState.Idle)} />\n            );\n        default:\n            console.error(`Unknown state for idle inputs: ${screenState}`)\n            return(\n                <React.Fragment/>\n            );\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { DistractionType } from '../../App';\n\ntype RunningControlsProps = {\n    addDistraction: (description: string, type: DistractionType)=>void,\n    stopActivity: (time: number)=>void\n}\n\nenum ScreenState {\n    Default,\n    AddingDistraction,\n    StoppingActivity\n}\n\nfunction getCurrentTime() {\n    return Math.floor(Date.now() / 1000 );\n}\n\nexport default function RunningControls(props : RunningControlsProps){\n    const {addDistraction, stopActivity} = props;\n\n    const [screenState, setScreenState] = useState(ScreenState.Default);\n\n    const [distractionDescription, setDistractionDescription] = useState(\"\");\n    const [distractionType, setDistractionType] = useState(DistractionType.Internal);\n\n    const [stopTimeString, setStopTimeString] = useState(\"\");\n    \n    function handleStopActivity(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        const stopTime = Date.parse(stopTimeString);\n        debugger;\n        if(stopTime) {\n            stopActivity(Math.floor(stopTime / 1000));\n        } else {\n            setStopTimeString((new Date()).toLocaleString());\n        }\n    }\n\n    function handleAddDistraction(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        addDistraction(distractionDescription, distractionType);\n        setDistractionDescription(\"\");\n        setDistractionType(DistractionType.Internal);\n        setScreenState(ScreenState.Default);\n    }\n\n    switch(screenState) {\n        case ScreenState.Default:\n            return(\n                <React.Fragment>\n                    <button autoFocus accessKey=\"a\" onClick={()=>setScreenState(ScreenState.AddingDistraction)}><u>A</u>dd Distraction</button>\n                    <button\n                      accessKey=\"n\"\n                      onClick={()=>{setScreenState(ScreenState.StoppingActivity); setStopTimeString((new Date()).toLocaleString())}}>\n                      E<u>n</u>d Activity\n                    </button>\n                </React.Fragment>\n            );\n        case ScreenState.AddingDistraction:\n            return(\n                <form onSubmit={handleAddDistraction}>\n                    <input autoFocus type=\"text\" placeholder=\"Distraction description...\" onChange={(e)=>setDistractionDescription(e.target.value)} value={distractionDescription}/>\n                    <label accessKey=\"i\"><input type=\"radio\" value={DistractionType.Internal} checked={distractionType === DistractionType.Internal} onChange={()=>setDistractionType(DistractionType.Internal)}/><u>I</u>nternal</label>\n                    <label accessKey=\"x\"><input type=\"radio\" value={DistractionType.External} checked={distractionType === DistractionType.External} onChange={()=>setDistractionType(DistractionType.External)}/>E<u>x</u>ternal</label>\n                    <button accessKey=\"a\" type=\"submit\"><u>A</u>dd</button>\n                    <button accessKey=\"b\" onClick={()=>setScreenState(ScreenState.Default)}><u>B</u>ack</button>\n                </form>\n            );\n        case ScreenState.StoppingActivity:\n            return(\n                <form onSubmit={handleStopActivity}>\n                    <input autoFocus type=\"text\" placeholder=\"Stop time...\" value={stopTimeString} onChange={e=>setStopTimeString(e.target.value)}/>\n                    <button accessKey=\"c\" type=\"submit\"><u>C</u>onfirm</button>\n                    <button accessKey=\"b\" onClick={()=>setScreenState(ScreenState.Default)}><u>B</u>ack</button>\n                </form>\n            )\n    }\n}\n","import React, { useEffect, useState } from 'react';\n\ntype CountdownTimerProps = {\n    end : number,\n    current : number\n}\n\nfunction formatTimeRemaining(totalSecondsRemaining : number) {\n    const pastDue = totalSecondsRemaining < 0;\n    totalSecondsRemaining = Math.abs(totalSecondsRemaining);\n    const minutesRemaining = Math.floor(totalSecondsRemaining / 60);\n    const secondsRemaining = totalSecondsRemaining % 60;\n    const paddedMinutesRemaining = minutesRemaining < 10 ? (\"0\" + minutesRemaining) : (\"\" + minutesRemaining);\n    const paddedSecondsRemaining = secondsRemaining < 10 ? (\"0\" + secondsRemaining) : (\"\" + secondsRemaining);\n    return `${pastDue ? \"-\" : \" \"}${paddedMinutesRemaining}:${paddedSecondsRemaining}`;\n}\n\nexport default function CountdownTimer(props : CountdownTimerProps) {\n    const {end, current} = props;\n    const timeRemaining = formatTimeRemaining(end - current);\n    return (\n        <pre style={{fontSize: 'xx-large'}}>\n            {timeRemaining}\n        </pre>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Activity, ActivityType } from '../App';\nimport './Status.css';\n\ntype StatusProps = {\n    activity: Activity | null\n    currentTime: number\n}\n\nlet favicon = \"\";\nfunction updateFavicon(emoji : string) {\n    if (favicon !== emoji) {\n        favicon = emoji;\n        const iconLink = document.querySelector<HTMLLinkElement>(\"link[rel=icon]\");\n        if (iconLink) {\n            iconLink.href = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${favicon}</text></svg>`\n        } else {\n            console.error(\"Could not find favicon link tag\");\n        }\n    } \n}\n\nlet title = \"\";\nfunction updateTitle(newTitle : string) {\n    if (newTitle !== title) {\n        title = newTitle;\n        document.title = newTitle;\n    } \n}\n\nexport default function Status(props : StatusProps) {\n    const {activity, currentTime} = props;\n    \n    let icon = \"\";\n    if(activity === null) {\n        icon = \"💤\";\n    } else if(activity.scheduledEnd > currentTime) {\n        icon = activity.type === ActivityType.Focus ? \"🤔\" : \"😎\";\n    } else {\n        icon = \"⌛\";\n    }\n    \n    let status = \"\";\n    if(activity === null) {\n        status = \"Idling...\"\n    } else if(activity.type === ActivityType.Break) {\n        status = \"Relaxing...\"\n    } else if(activity.type === ActivityType.Focus) {\n        status = `Focusing on ${activity.goal}...`\n    }\n\n\n    updateFavicon(icon);\n    updateTitle(status);\n    return(\n        <div className=\"Status\">\n            <h1 style={{marginBottom: 0}}>{`${icon} ${title}`}</h1>\n        </div>\n    );\n}","import React, { ReactElement, useEffect, useState } from 'react';\nimport './App.css';\nimport IdleInputs from './components/IdleInputs/index';\nimport CountdownTimer from './components/CountdownTimer';\nimport RunningControls from './components/RunningControls';\nimport Status from './components/Status';\n\nconst POM_MINUTES = 25;\nconst SHORT_BREAK_MINUTES = 5;\nconst LONG_BREAK_MINUTES = 15;\n\n\nexport enum ActivityType {\n  Focus = \"focus\",\n  Break = \"break\" \n};\nexport enum DistractionType { \n  Internal = 'internal',\n  External = 'external'\n};\n\ntype Distraction = {\n  description: string,\n  type: DistractionType\n}\n\nexport type Activity = {\n  start: number,\n  scheduledEnd: number;\n  end: number | null,\n  type: ActivityType,\n  goal?: string,\n  distractions?: Distraction[],\n  tags?: string[]\n}\n\nenum CurrentState {\n  Idling = 'idling',\n  Focusing = 'focusing',\n  Relaxing = 'relaxing',\n};\n\nfunction getUnixTime() : number {\n  return Math.floor(Date.now() / 1000);\n}\n\nfunction minutesToSeconds(minutes : number) {\n  return minutes * 60;\n}\n\nfunction deepCopy<T>(thing: T): T {\n  return JSON.parse(JSON.stringify(thing));\n}\n\nfunction prettifyTimes(key : string, value : any) {\n  if((key === 'start' || key === 'scheduledEnd' || key === 'end') && value) {\n    return (new Date(value * 1000)).toLocaleString();\n  }\n  return value;\n}\n\nlet intervalId : undefined | number = undefined;\n\nfunction App() {\n\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [currentTime, setCurrentTime] = useState(getUnixTime());\n  const [currentActivity, setCurrentActivity] = useState<Activity | null>(null);\n\n  //load from local storage on page load\n  useEffect(()=>{\n    const activitiesJson = localStorage.getItem('activities');\n    if(activitiesJson) {\n      const parsedActivities = JSON.parse(activitiesJson) as Activity[];\n      setActivities(parsedActivities);\n    }\n\n    const currentActivityJson = localStorage.getItem('currentActivity');\n    if(currentActivityJson) {\n      const parsedActivity = JSON.parse(currentActivityJson) as Activity;\n      setCurrentActivity(parsedActivity);\n    }\n  }, []);\n\n  //save activities when updated\n  useEffect(()=>{\n    localStorage.setItem(\"activities\", JSON.stringify(activities));\n  }, [activities]);\n\n  //save currentActivity when updated\n  useEffect(()=>{\n    localStorage.setItem(\"currentActivity\", JSON.stringify(currentActivity));\n  }, [currentActivity]);\n\n  let currentState : CurrentState;\n  if(currentActivity && currentActivity.end === null){\n    switch(currentActivity.type){\n      case ActivityType.Focus:\n        currentState = CurrentState.Focusing;\n        break;\n      case ActivityType.Break:\n        currentState = CurrentState.Relaxing;\n        break;\n      default:\n        console.error(`Unknown activity type: ${currentActivity.type}`);\n        currentState = CurrentState.Idling;\n    }\n  } else {\n    currentState = CurrentState.Idling;\n  }\n\n  // set the internal timer\n  useEffect(() => {\n    if(intervalId === undefined) {\n      intervalId = window.setInterval(()=>{\n        const newTime = getUnixTime();\n        if(newTime > currentTime){\n          setCurrentTime(newTime);\n        }\n      }, 500);\n    }\n    return () => {\n      window.clearInterval(intervalId);\n      intervalId = undefined;\n    };\n  });\n\n  // check that notifications are setup\n  const [checkedNotificationPermissions, setCheckedNotificationPermissions] = useState(false);\n  useEffect(() => {\n    if(!checkedNotificationPermissions) {\n      if(Notification.permission !== \"granted\"){\n        Notification.requestPermission();\n      }\n      setCheckedNotificationPermissions(true);\n    }\n  });\n\n  //send notification if time has expired\n  const [hasNotifiedTimout, setHasNotifiedTimout] = useState(false);\n  useEffect(() => {\n    if(currentState !== CurrentState.Idling && currentActivity && currentTime > currentActivity.scheduledEnd && !hasNotifiedTimout) {\n      new Notification(`${currentActivity.type} time complete`, {requireInteraction: true});\n      setHasNotifiedTimout(true);\n    }\n  });\n\n  //set current activity to focus\n  function startFocus(goal: string, tags: string[]){\n    const start = getUnixTime();\n    const scheduledEnd = start + minutesToSeconds(POM_MINUTES);\n    const activity : Activity = {\n      start,\n      end: null,\n      scheduledEnd,\n      goal,\n      tags,\n      type: ActivityType.Focus,\n      distractions: []\n    }\n    setCurrentActivity(activity);\n    setHasNotifiedTimout(false);\n  }\n\n  //set current activity to a break\n  function startBreak(minutes: number){\n    const start = getUnixTime();\n    const scheduledEnd = start + minutesToSeconds(minutes);\n    const activity : Activity = {\n      start,\n      end: null,\n      scheduledEnd,\n      type: ActivityType.Break\n    }\n    setCurrentActivity(activity);\n    setHasNotifiedTimout(false);\n  }\n\n  function addDistraction(description: string, type: DistractionType) {\n    if(!currentActivity) {\n      console.error(\"trying to add a distraction when no activity is in progress\");\n      return;\n    }\n    const activityCopy = deepCopy(currentActivity);\n    if(!activityCopy.distractions) {\n      activityCopy.distractions = [];\n    }\n    activityCopy.distractions.push({\n      description,\n      type\n    });\n    setCurrentActivity(activityCopy);\n  }\n\n  function stopActivity(stopTime: number) {\n    if(!currentActivity) {\n      console.error(\"trying to stop an activity when no activity is in progress\");\n      return;\n    }\n    const activityCopy = deepCopy(currentActivity);\n    const activitiesCopy = Array.from(activities);\n    activityCopy.end = stopTime;\n    activitiesCopy.push(activityCopy);\n    setActivities(activitiesCopy);\n    setCurrentActivity(null);\n  }\n\n  let controls : JSX.Element;\n  switch(currentState) {\n    case CurrentState.Idling:\n      controls = (\n        <IdleInputs\n          startFocus={startFocus}\n          startBreak={startBreak}\n          shortBreakMinutes={SHORT_BREAK_MINUTES}\n          longBreakMinutes={LONG_BREAK_MINUTES} \n        />\n      )\n      break;\n    case CurrentState.Focusing:\n    case CurrentState.Relaxing:\n      controls = <RunningControls addDistraction={addDistraction} stopActivity={stopActivity} />\n      break;\n    default:\n      console.error(`Unsupported currentState: ${currentState}`)\n      controls = <React.Fragment/>\n  }\n\n  let timer : JSX.Element;\n  if(currentActivity && currentState != CurrentState.Idling) {\n      timer = (<CountdownTimer end={currentActivity.scheduledEnd} current={currentTime}/>);\n  } else {\n      timer = ( <CountdownTimer end={0} current={0}/> );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          yapt: yet another pomodoro timer\n        </p>\n      </header>\n      <div className=\"App-body\">\n        <Status activity={currentActivity} currentTime={currentTime}/>\n        <div className=\"Timer-controls\">\n          {timer}\n          {controls}\n        </div>\n        <hr/>\n        <h2>Current Activity</h2>\n        <pre>\n          {JSON.stringify(currentActivity, prettifyTimes, 2)}\n        </pre>\n        <hr/>\n        <h2>Previous Activities</h2>\n        <pre>\n          {JSON.stringify(Array.from(activities).reverse(), prettifyTimes, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}