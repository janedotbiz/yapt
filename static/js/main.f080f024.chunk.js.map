{"version":3,"sources":["components/IdleInputs/SetupFocus.tsx","components/IdleInputs/index.tsx","components/RunningControls/index.tsx","components/IdleInputs/SetupBreak.tsx","components/CountdownTimer.tsx","components/Status.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Type","ScreenState","SetupFocus","props","useState","goal","setGoal","duration","setDuration","Work","type","setType","onSubmit","e","preventDefault","startFocus","handleSubmit","htmlFor","accessKey","autoFocus","id","onChange","target","value","parseInt","Personal","checked","onClick","cancel","SetupBreak","suggestedDuration","breakType","startBreak","description","setDescription","IdleInputs","shortBreakMinutes","longBreakMinutes","Idle","screenState","setScreenState","suggestedBreakDuration","setSuggestedBreakDuration","BreakType","Short","selectedBreakType","setSelectedBreakType","setupBreak","Fragment","Long","console","error","CountdownTimer","timeRemaining","totalSecondsRemaining","pastDue","Math","abs","minutesRemaining","floor","secondsRemaining","paddedMinutesRemaining","paddedSecondsRemaining","formatTimeRemaining","end","current","style","fontSize","RunningControls","addDistraction","stopActivity","Default","distractionDescription","setDistractionDescription","DistractionType","Internal","distractionType","setDistractionType","stopTimeString","setStopTimeString","AddingDistraction","StoppingActivity","Date","toLocaleString","External","stopTime","parse","placeholder","favicon","title","Status","activity","currentTime","icon","scheduledEnd","ActivityType","Focus","newTitle","status","Break","emoji","iconLink","document","querySelector","href","updateFavicon","className","marginBottom","CurrentState","getUnixTime","now","minutesToSeconds","minutes","deepCopy","thing","JSON","stringify","prettifyTimes","key","intervalId","undefined","App","currentState","activities","setActivities","setCurrentTime","currentActivity","setCurrentActivity","useEffect","activitiesJson","localStorage","getItem","parsedActivities","currentActivityJson","parsedActivity","setItem","Focusing","Relaxing","Idling","window","setInterval","newTime","clearInterval","checkedNotificationPermissions","setCheckedNotificationPermissions","Notification","permission","requestPermission","controls","timer","hasNotifiedTimout","setHasNotifiedTimout","requireInteraction","tags","start","distractions","activityCopy","push","activitiesCopy","Array","from","reverse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qKAOKA,ECFAC,ECGAA,E,6DFIU,SAASC,EAAWC,GAA0B,IAAD,EAChCC,mBAAS,IADuB,mBACjDC,EADiD,KAC3CC,EAD2C,OAExBF,mBAAS,IAFe,mBAEjDG,EAFiD,KAEvCC,EAFuC,OAGhCJ,mBAASJ,EAAKS,MAHkB,mBAGjDC,EAHiD,KAG3CC,EAH2C,KAUxD,OACI,uBAAMC,SAAU,SAAAC,GAAC,OANrB,SAAsBA,GAClBA,EAAEC,iBACFX,EAAMY,WAAWV,EAAME,EAAU,CAACG,IAIbM,CAAaH,IAAlC,UACI,wBAAOI,QAAQ,UAAUC,UAAU,IAAnC,UAAuC,kCAAvC,UACA,uBAAOC,WAAS,EAACC,GAAG,UAAUV,KAAK,OAAOW,SAAU,SAACR,GAAD,OAAKP,EAAQO,EAAES,OAAOC,QAAQA,MAAOlB,IACzF,wBAAOY,QAAQ,cAAcC,UAAU,IAAvC,UAA2C,kCAA3C,cACA,uBAAOE,GAAG,cAAcV,KAAK,OAAOW,SAAU,SAACR,GAAD,OAAKL,EAAYgB,SAASX,EAAES,OAAOC,QAAU,IAAIA,MAAOhB,IACtG,wBAAOW,UAAU,IAAjB,UAAqB,uBAAOR,KAAK,QAAQa,MAAOvB,EAAKyB,SAAUC,QAAShB,IAASV,EAAKyB,SAAUJ,SAAU,WAAKV,EAAQX,EAAKyB,aAAa,kCAAzI,aACA,wBAAOP,UAAU,IAAjB,UAAqB,uBAAOR,KAAK,QAAQa,MAAOvB,EAAKS,KAAMiB,QAAShB,IAASV,EAAKS,KAAMY,SAAU,WAAKV,EAAQX,EAAKS,SAApH,IAA8H,kCAA9H,QACA,yBAAQS,UAAU,IAAIR,KAAK,SAA3B,UAAoC,kCAApC,UACA,yBAAQQ,UAAU,IAAIS,QAASxB,EAAMyB,OAArC,UAA6C,kCAA7C,YGrBG,SAASC,EAAW1B,GAA0B,IAClD2B,EAAoD3B,EAApD2B,kBAAmBC,EAAiC5B,EAAjC4B,UAAWC,EAAsB7B,EAAtB6B,WAAYJ,EAAUzB,EAAVyB,OADO,EAElBxB,mBAAiB2B,GAFC,mBAEjDE,EAFiD,KAEpCC,EAFoC,OAGxB9B,mBAAS0B,GAHe,mBAGjDvB,EAHiD,KAGvCC,EAHuC,KAUxD,OACI,uBAAMI,SAAU,SAAAC,GAAC,OANrB,SAAsBA,GAClBA,EAAEC,iBACFkB,EAAWC,EAAa1B,EAAUwB,GAIbf,CAAaH,IAAlC,UACI,wBAAOI,QAAQ,mBAAmBC,UAAU,IAA5C,gBAAmD,kCAAnD,aACA,uBAAOR,KAAK,OAAOU,GAAG,mBAAmBC,SAAU,SAACR,GAAD,OAAKqB,EAAerB,EAAES,OAAOC,QAAQA,MAAOU,IAC/F,wBAAOhB,QAAQ,gBAAgBC,UAAU,IAAzC,UAA6C,kCAA7C,aACA,uBAAOC,WAAS,EAACC,GAAG,gBAAgBV,KAAK,OAAOW,SAAU,SAACR,GAAD,OAAKL,EAAYgB,SAASX,EAAES,OAAOC,QAAU,IAAIA,MAAOhB,IAClH,yBAAQW,UAAU,IAAIR,KAAK,SAA3B,cAAqC,kCAArC,SACA,yBAAQQ,UAAU,IAAIS,QAASC,EAA/B,UAAuC,kCAAvC,YFTG,SAASO,EAAWhC,GAA0B,IAClDY,EAA+DZ,EAA/DY,WAAYiB,EAAmD7B,EAAnD6B,WAAYI,EAAuCjC,EAAvCiC,kBAAmBC,EAAoBlC,EAApBkC,iBADM,EAElBjC,mBAASH,EAAYqC,MAFH,mBAEjDC,EAFiD,KAEpCC,EAFoC,OAGIpC,mBAAS,GAHb,mBAGjDqC,EAHiD,KAGzBC,EAHyB,OAINtC,mBAASuC,EAAUC,OAJb,mBAIjDC,EAJiD,KAI9BC,EAJ8B,KAMxD,SAASC,EAAWjB,EAA4BC,GAC5CW,EAA0BZ,GAC1BgB,EAAqBf,GACrBS,EAAevC,EAAY4B,YAG/B,OAAOU,GACH,KAAKtC,EAAYqC,KACb,OACI,eAAC,IAAMU,SAAP,WACI,yBAAQ7B,WAAS,EAACD,UAAU,IAAIS,QAAS,kBAAMa,EAAevC,EAAYC,aAA1E,cAAwF,kCAAxF,SACA,yBAAQgB,UAAU,IAAIS,QAAS,kBAAMoB,EAAWX,EAAmBO,EAAUC,QAA7E,cAAsF,kCAAtF,eACA,yBAAQ1B,UAAU,IAAIS,QAAS,kBAAMoB,EAAWV,EAAkBM,EAAUM,OAA5E,UAAmF,kCAAnF,kBAGZ,KAAKhD,EAAYC,WACb,OACI,cAACA,EAAD,CAAYa,WAAYA,EAAYa,OAAQ,kBAAIY,EAAevC,EAAYqC,SAEnF,KAAKrC,EAAY4B,WACb,OACI,cAACA,EAAD,CAAYG,WAAYA,EAAYD,UAAWc,EAAmBf,kBAAmBW,EAAwBb,OAAQ,kBAAIY,EAAevC,EAAYqC,SAE5J,QAEI,OADAY,QAAQC,MAAR,yCAAgDZ,IAE5C,cAAC,IAAMS,SAAP,KGjCD,SAASI,EAAejD,GAA8B,IAE3DkD,EAZV,SAA6BC,GACzB,IAAMC,EAAUD,EAAwB,EACxCA,EAAwBE,KAAKC,IAAIH,GACjC,IAAMI,EAAmBF,KAAKG,MAAML,EAAwB,IACtDM,EAAmBN,EAAwB,GAC3CO,EAAyBH,EAAmB,GAAM,IAAMA,EAAqB,GAAKA,EAClFI,EAAyBF,EAAmB,GAAM,IAAMA,EAAqB,GAAKA,EACxF,MAAM,GAAN,OAAUL,EAAU,IAAM,KAA1B,OAAgCM,EAAhC,YAA0DC,GAKpCC,CADC5D,EAAhB6D,IAAgB7D,EAAX8D,SAEZ,OACI,qBAAKC,MAAO,CAACC,SAAU,YAAvB,SACKd,IFJE,SAASe,EAAgBjE,GAA8B,IAC3DkE,EAAgClE,EAAhCkE,eAAgBC,EAAgBnE,EAAhBmE,aAD0C,EAG3BlE,mBAASH,EAAYsE,SAHM,mBAG1DhC,EAH0D,KAG7CC,EAH6C,OAKLpC,mBAAS,IALJ,mBAK1DoE,EAL0D,KAKlCC,EALkC,OAMnBrE,mBAASsE,EAAgBC,UANN,mBAM1DC,EAN0D,KAMzCC,EANyC,OAQrBzE,mBAAS,IARY,mBAQ1D0E,EAR0D,KAQ1CC,EAR0C,KA6BjE,OAAOxC,GACH,KAAKtC,EAAYsE,QACb,OACI,eAAC,IAAMvB,SAAP,WACI,yBAAQ7B,WAAS,EAACD,UAAU,IAAIS,QAAS,kBAAIa,EAAevC,EAAY+E,oBAAxE,cAA6F,kCAA7F,mBACA,yBACE9D,UAAU,IACVS,QAAS,WAAKa,EAAevC,EAAYgF,kBAAmBF,GAAmB,IAAIG,MAAQC,mBAF7F,cAGG,kCAHH,mBAOZ,KAAKlF,EAAY+E,kBACb,OACI,uBAAMpE,SAtBlB,SAA8BC,GAC1BA,EAAEC,iBACFuD,EAAeG,EAAwBI,GACvCH,EAA0B,IAC1BI,EAAmBH,EAAgBC,UACnCnC,EAAevC,EAAYsE,UAiBnB,UACI,wBAAOtD,QAAQ,yBAAyBC,UAAU,IAAlD,UAAsD,kCAAtD,6BACA,uBAAOC,WAAS,EAACC,GAAG,yBAAyBV,KAAK,OAAOW,SAAU,SAACR,GAAD,OAAK4D,EAA0B5D,EAAES,OAAOC,QAAQA,MAAOiD,IAC1H,wBAAOtD,UAAU,IAAjB,UAAqB,uBAAOR,KAAK,QAAQa,MAAOmD,EAAgBC,SAAUjD,QAASkD,IAAoBF,EAAgBC,SAAUtD,SAAU,kBAAIwD,EAAmBH,EAAgBC,aAAY,kCAA9L,aACA,wBAAOzD,UAAU,IAAjB,UAAqB,uBAAOR,KAAK,QAAQa,MAAOmD,EAAgBU,SAAU1D,QAASkD,IAAoBF,EAAgBU,SAAU/D,SAAU,kBAAIwD,EAAmBH,EAAgBU,aAAlL,IAA+L,kCAA/L,YACA,yBAAQlE,UAAU,IAAIR,KAAK,SAA3B,UAAoC,kCAApC,QACA,yBAAQQ,UAAU,IAAIS,QAAS,kBAAIa,EAAevC,EAAYsE,UAA9D,UAAwE,kCAAxE,YAGZ,KAAKtE,EAAYgF,iBACb,OACI,uBAAMrE,SA5ClB,SAA4BC,GACxBA,EAAEC,iBACF,IAAMuE,EAAWH,KAAKI,MAAMR,GAEzBO,EACCf,EAAad,KAAKG,MAAM0B,EAAW,MAEnCN,GAAmB,IAAIG,MAAQC,mBAqC3B,UACI,wBAAOlE,QAAQ,WAAWC,UAAU,IAApC,cAAyC,kCAAzC,cACA,uBAAOC,WAAS,EAACC,GAAG,WAAWV,KAAK,OAAO6E,YAAY,eAAehE,MAAOuD,EAAgBzD,SAAU,SAAAR,GAAC,OAAEkE,EAAkBlE,EAAES,OAAOC,UACrI,yBAAQL,UAAU,IAAIR,KAAK,SAA3B,UAAoC,kCAApC,YACA,yBAAQQ,UAAU,IAAIS,QAAS,kBAAIa,EAAevC,EAAYsE,UAA9D,UAAwE,kCAAxE,c,SFrEfvE,K,oBAAAA,E,aAAAA,M,cCFAC,O,eAAAA,I,2BAAAA,I,4BAAAA,M,cCGAA,O,qBAAAA,I,yCAAAA,I,wCAAAA,M,eGCDuF,EAAU,GAad,IAAIC,EAAQ,GAQG,SAASC,EAAOvF,GAAsB,IAC1CwF,EAAyBxF,EAAzBwF,SAAUC,EAAezF,EAAfyF,YAEbC,EAAO,GAEPA,EADY,OAAbF,EACQ,eACDA,EAASG,aAAeF,EACvBD,EAASjF,OAASqF,EAAaC,MAAQ,eAAO,eAE9C,SAGX,IAnBiBC,EAmBbC,EAAS,GAYb,OAXgB,OAAbP,EACCO,EAAS,YACHP,EAASjF,OAASqF,EAAaI,MACrCD,EAAS,cACHP,EAASjF,OAASqF,EAAaC,QACrCE,EAAM,sBAAkBP,EAAStF,KAA3B,QAtCd,SAAuB+F,GACnB,GAAIZ,IAAYY,EAAO,CACnBZ,EAAUY,EACV,IAAMC,EAAWC,SAASC,cAA+B,kBACrDF,EACAA,EAASG,KAAT,yIAAkJhB,EAAlJ,iBAEAtC,QAAQC,MAAM,oCAmCtBsD,CAAcZ,IA7BGI,EA8BLC,KA7BKT,IACbA,EAAQQ,EACRK,SAASb,MAAQQ,GA6BjB,qBAAKS,UAAU,SAAf,SACI,oBAAIxC,MAAO,CAACyC,aAAc,GAA1B,mBAAkCd,EAAlC,YAA0CJ,OCjDtD,IAKYM,EAIArB,EAIA/B,EAoBPiE,EAML,SAASC,IACP,OAAOrD,KAAKG,MAAMuB,KAAK4B,MAAQ,KAGjC,SAASC,EAAiBC,GACxB,OAAiB,GAAVA,EAGT,SAASC,EAAYC,GACnB,OAAOC,KAAK7B,MAAM6B,KAAKC,UAAUF,IAGnC,SAASG,EAAcC,EAAc/F,GACnC,MAAY,UAAR+F,GAA2B,iBAARA,GAAkC,QAARA,IAAkB/F,EAG5DA,EAFG,IAAI2D,KAAa,IAAR3D,GAAe4D,kB,SAhDxBY,K,cAAAA,E,eAAAA,M,cAIArB,K,oBAAAA,E,qBAAAA,M,cAIA/B,K,oBAAAA,E,mBAAAA,M,cAoBPiE,K,gBAAAA,E,oBAAAA,E,qBAAAA,M,KAyBL,IAAIW,OAAkCC,EA4MvBC,MA1Mf,WAAgB,IA+BVC,EA/BS,EAEuBtH,mBAAqB,IAF5C,mBAENuH,EAFM,KAEMC,EAFN,OAGyBxH,mBAASyG,KAHlC,mBAGNjB,EAHM,KAGOiC,EAHP,OAIiCzH,mBAA0B,MAJ3D,mBAIN0H,EAJM,KAIWC,EAJX,KAgCb,GAzBAC,qBAAU,WACR,IAAMC,EAAiBC,aAAaC,QAAQ,cAC5C,GAAGF,EAAgB,CACjB,IAAMG,EAAmBjB,KAAK7B,MAAM2C,GACpCL,EAAcQ,GAGhB,IAAMC,EAAsBH,aAAaC,QAAQ,mBACjD,GAAGE,EAAqB,CACtB,IAAMC,EAAiBnB,KAAK7B,MAAM+C,GAClCN,EAAmBO,MAEpB,IAGHN,qBAAU,WACRE,aAAaK,QAAQ,aAAcpB,KAAKC,UAAUO,MACjD,CAACA,IAGJK,qBAAU,WACRE,aAAaK,QAAQ,kBAAmBpB,KAAKC,UAAUU,MACtD,CAACA,IAGDA,GAA2C,OAAxBA,EAAgB9D,IACpC,OAAO8D,EAAgBpH,MACrB,KAAKqF,EAAaC,MAChB0B,EAAed,EAAa4B,SAC5B,MACF,KAAKzC,EAAaI,MAChBuB,EAAed,EAAa6B,SAC5B,MACF,QACEvF,QAAQC,MAAR,iCAAwC2E,EAAgBpH,OACxDgH,EAAed,EAAa8B,YAGhChB,EAAed,EAAa8B,OAI9BV,qBAAU,WASR,YARkBR,IAAfD,IACDA,EAAaoB,OAAOC,aAAY,WAC9B,IAAMC,EAAUhC,IACbgC,EAAUjD,GACXiC,EAAegB,KAEhB,MAEE,WACLF,OAAOG,cAAcvB,GACrBA,OAAaC,MA5DJ,MAiE+DpH,oBAAS,GAjExE,mBAiEN2I,EAjEM,KAiE0BC,EAjE1B,KAkEbhB,qBAAU,WACJe,IAC6B,YAA5BE,aAAaC,YACdD,aAAaE,oBAEfH,GAAkC,OAvEzB,IAkJTI,EAqBAC,EAvKS,EA4EqCjJ,oBAAS,GA5E9C,mBA4ENkJ,EA5EM,KA4EaC,EA5Eb,KAmJb,OAtEAvB,qBAAU,WACLN,IAAiBd,EAAa8B,QAAUZ,GAAmBlC,EAAckC,EAAgBhC,eAAiBwD,IAC3G,IAAIL,aAAJ,UAAoBnB,EAAgBpH,KAApC,kBAA0D,CAAC8I,oBAAoB,IAC/ED,GAAqB,OAmElB7B,GACL,KAAKd,EAAa8B,OAChBU,EACE,cAACjH,EAAD,CACEpB,WAlER,SAAoBV,EAAcE,EAAkBkJ,GAClD,IAAMC,EAAQ7C,IAERlB,EAAsB,CAC1B+D,QACA1F,IAAK,KACL8B,aAJmB4D,EAAQ3C,EAAiBxG,GAK5CF,OACAoJ,OACA/I,KAAMqF,EAAaC,MACnB2D,aAAc,IAEhB5B,EAAmBpC,GACnB4D,GAAqB,IAsDfvH,WAlDR,SAAoBC,EAAqB+E,EAAiBjF,GACxD,IAAM2H,EAAQ7C,IAERlB,EAAsB,CAC1B+D,QACA1F,IAAK,KACL8B,aAJmB4D,EAAQ3C,EAAiBC,GAK5CtG,KAAMqF,EAAaI,MACnB9F,KAAM4B,EACNwH,KAAM,CAAC1H,IAETgG,EAAmBpC,GACnB4D,GAAqB,IAuCfnH,kBApNkB,EAqNlBC,iBApNiB,KAuNrB,MACF,KAAKuE,EAAa4B,SAClB,KAAK5B,EAAa6B,SAChBW,EAAW,cAAChF,EAAD,CAAiBC,eA3ChC,SAAwBpC,EAAqBvB,GAC3C,GAAIoH,EAAJ,CAIA,IAAM8B,EAAe3C,EAASa,GAC1B8B,EAAaD,eACfC,EAAaD,aAAe,IAE9BC,EAAaD,aAAaE,KAAK,CAC7B5H,cACAvB,SAEFqH,EAAmB6B,QAXjB1G,QAAQC,MAAM,gEAyC8CmB,aA3BhE,SAAsBe,GACpB,GAAIyC,EAAJ,CAIA,IAAM8B,EAAe3C,EAASa,GACxBgC,EAAiBC,MAAMC,KAAKrC,GAClCiC,EAAa5F,IAAMqB,EACnByE,EAAeD,KAAKD,GACpBhC,EAAckC,GACd/B,EAAmB,WARjB7E,QAAQC,MAAM,iEA0Bd,MACF,QACED,QAAQC,MAAR,oCAA2CuE,IAC3C0B,EAAW,cAAC,IAAMpG,SAAP,IAUf,OALIqG,EADDvB,GAAmBJ,GAAgBd,EAAa8B,OACtC,cAACtF,EAAD,CAAgBY,IAAK8D,EAAgBhC,aAAc7B,QAAS2B,IAE3D,cAACxC,EAAD,CAAgBY,IAAK,EAAGC,QAAS,IAI7C,sBAAKyC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mEAIF,sBAAKA,UAAU,WAAf,UACE,cAAC,EAAD,CAAQf,SAAUmC,EAAiBlC,YAAaA,IAChD,sBAAKc,UAAU,iBAAf,UACG2C,EACAD,KAEH,uBACA,kDACA,8BACGjC,KAAKC,UAAUU,EAAiBT,EAAe,KAElD,uBACA,qDACA,8BACGF,KAAKC,UAAU2C,MAAMC,KAAKrC,GAAYsC,UAAW5C,EAAe,YCxP5D6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvE,SAASwE,eAAe,SAM1BZ,M","file":"static/js/main.f080f024.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\ntype SetupFocusProps = {\n    startFocus: (description: string, duraction: number, type: string[])=>void,\n    cancel: ()=>void\n}\n\nenum Type{\n    Personal = \"personal\",\n    Work = \"work\"\n}\n\nexport default function SetupFocus(props : SetupFocusProps) {\n    const [goal, setGoal] = useState(\"\");\n    const [duration, setDuration] = useState(25);\n    const [type, setType] = useState(Type.Work);\n\n    function handleSubmit(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        props.startFocus(goal, duration, [type])\n    }\n\n    return(\n        <form onSubmit={e => handleSubmit(e)}>\n            <label htmlFor=\"pomGoal\" accessKey=\"g\"><u>G</u>oal:</label>\n            <input autoFocus id=\"pomGoal\" type=\"text\" onChange={(e)=>setGoal(e.target.value)} value={goal}/>\n            <label htmlFor=\"pomDuration\" accessKey=\"d\"><u>D</u>uration:</label>\n            <input id=\"pomDuration\" type=\"text\" onChange={(e)=>setDuration(parseInt(e.target.value) || 0)} value={duration}/>\n            <label accessKey=\"p\"><input type=\"Radio\" value={Type.Personal} checked={type === Type.Personal} onChange={()=>{setType(Type.Personal)}}/><u>P</u>ersonal</label>\n            <label accessKey=\"o\"><input type=\"Radio\" value={Type.Work} checked={type === Type.Work} onChange={()=>{setType(Type.Work)}}/>W<u>o</u>rk</label>\n            <button accessKey=\"s\" type=\"submit\"><u>S</u>tart</button>\n            <button accessKey=\"b\" onClick={props.cancel}><u>B</u>ack</button>\n        </form>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport SetupFocus from './SetupFocus';\nimport SetupBreak from './SetupBreak';\nimport { BreakType } from '../../App';\n\nenum ScreenState {\n  Idle,\n  SetupFocus,\n  SetupBreak,\n}\n\ntype IdleInputsProps = {\n    startFocus: (description: string, duration: number, type: string[])=>void,\n    startBreak: (description: string, duration: number, breakType: BreakType)=>void,\n    shortBreakMinutes: number,\n    longBreakMinutes: number\n}\n\nexport default function IdleInputs(props : IdleInputsProps) {\n    const {startFocus, startBreak, shortBreakMinutes, longBreakMinutes} = props;\n    const [screenState, setScreenState] = useState(ScreenState.Idle);\n    const [suggestedBreakDuration, setSuggestedBreakDuration] = useState(0);\n    const [selectedBreakType, setSelectedBreakType] = useState(BreakType.Short);\n\n    function setupBreak(suggestedDuration : number, breakType: BreakType) {\n        setSuggestedBreakDuration(suggestedDuration);\n        setSelectedBreakType(breakType);\n        setScreenState(ScreenState.SetupBreak);\n    }\n\n    switch(screenState){\n        case ScreenState.Idle:\n            return(\n                <React.Fragment>\n                    <button autoFocus accessKey=\"o\" onClick={() => setScreenState(ScreenState.SetupFocus)}>F<u>o</u>cus</button>\n                    <button accessKey=\"h\" onClick={() => setupBreak(shortBreakMinutes, BreakType.Short)}>S<u>h</u>ort Break</button>\n                    <button accessKey=\"l\" onClick={() => setupBreak(longBreakMinutes, BreakType.Long)}><u>L</u>ong Break</button>\n                </React.Fragment>\n            );\n        case ScreenState.SetupFocus:\n            return(\n                <SetupFocus startFocus={startFocus} cancel={()=>setScreenState(ScreenState.Idle)} />\n            );\n        case ScreenState.SetupBreak:\n            return(\n                <SetupBreak startBreak={startBreak} breakType={selectedBreakType} suggestedDuration={suggestedBreakDuration} cancel={()=>setScreenState(ScreenState.Idle)} />\n            );\n        default:\n            console.error(`Unknown state for idle inputs: ${screenState}`)\n            return(\n                <React.Fragment/>\n            );\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { DistractionType } from '../../App';\n\ntype RunningControlsProps = {\n    addDistraction: (description: string, type: DistractionType)=>void,\n    stopActivity: (time: number)=>void\n}\n\nenum ScreenState {\n    Default,\n    AddingDistraction,\n    StoppingActivity\n}\n\nfunction getCurrentTime() {\n    return Math.floor(Date.now() / 1000 );\n}\n\nexport default function RunningControls(props : RunningControlsProps){\n    const {addDistraction, stopActivity} = props;\n\n    const [screenState, setScreenState] = useState(ScreenState.Default);\n\n    const [distractionDescription, setDistractionDescription] = useState(\"\");\n    const [distractionType, setDistractionType] = useState(DistractionType.Internal);\n\n    const [stopTimeString, setStopTimeString] = useState(\"\");\n    \n    function handleStopActivity(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        const stopTime = Date.parse(stopTimeString);\n        debugger;\n        if(stopTime) {\n            stopActivity(Math.floor(stopTime / 1000));\n        } else {\n            setStopTimeString((new Date()).toLocaleString());\n        }\n    }\n\n    function handleAddDistraction(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        addDistraction(distractionDescription, distractionType);\n        setDistractionDescription(\"\");\n        setDistractionType(DistractionType.Internal);\n        setScreenState(ScreenState.Default);\n    }\n\n    switch(screenState) {\n        case ScreenState.Default:\n            return(\n                <React.Fragment>\n                    <button autoFocus accessKey=\"d\" onClick={()=>setScreenState(ScreenState.AddingDistraction)}>A<u>d</u>d Distraction</button>\n                    <button\n                      accessKey=\"n\"\n                      onClick={()=>{setScreenState(ScreenState.StoppingActivity); setStopTimeString((new Date()).toLocaleString())}}>\n                      E<u>n</u>d Activity\n                    </button>\n                </React.Fragment>\n            );\n        case ScreenState.AddingDistraction:\n            return(\n                <form onSubmit={handleAddDistraction}>\n                    <label htmlFor=\"distractionDescription\" accessKey=\"d\"><u>D</u>istraction description:</label>\n                    <input autoFocus id=\"distractionDescription\" type=\"text\" onChange={(e)=>setDistractionDescription(e.target.value)} value={distractionDescription}/>\n                    <label accessKey=\"i\"><input type=\"radio\" value={DistractionType.Internal} checked={distractionType === DistractionType.Internal} onChange={()=>setDistractionType(DistractionType.Internal)}/><u>I</u>nternal</label>\n                    <label accessKey=\"x\"><input type=\"radio\" value={DistractionType.External} checked={distractionType === DistractionType.External} onChange={()=>setDistractionType(DistractionType.External)}/>E<u>x</u>ternal</label>\n                    <button accessKey=\"a\" type=\"submit\"><u>A</u>dd</button>\n                    <button accessKey=\"b\" onClick={()=>setScreenState(ScreenState.Default)}><u>B</u>ack</button>\n                </form>\n            );\n        case ScreenState.StoppingActivity:\n            return(\n                <form onSubmit={handleStopActivity}>\n                    <label htmlFor=\"stopTime\" accessKey=\"t\">S<u>t</u>op time:</label>\n                    <input autoFocus id=\"stopTime\" type=\"text\" placeholder=\"Stop time...\" value={stopTimeString} onChange={e=>setStopTimeString(e.target.value)}/>\n                    <button accessKey=\"c\" type=\"submit\"><u>C</u>onfirm</button>\n                    <button accessKey=\"b\" onClick={()=>setScreenState(ScreenState.Default)}><u>B</u>ack</button>\n                </form>\n            )\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { BreakType } from '../../App';\n\ntype SetupBreakProps = {\n    suggestedDuration: number,\n    breakType: BreakType,\n    startBreak: (description: string, duration: number, breakType: BreakType)=>void,\n    cancel: ()=>void\n}\n\nexport default function SetupBreak(props : SetupBreakProps) {\n    const {suggestedDuration, breakType, startBreak, cancel} = props;\n    const [description, setDescription] = useState<string>(breakType);\n    const [duration, setDuration] = useState(suggestedDuration);\n\n    function handleSubmit(e : React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        startBreak(description, duration, breakType);\n    }\n\n    return(\n        <form onSubmit={e => handleSubmit(e)}>\n            <label htmlFor=\"breakDescription\" accessKey=\"c\">Des<u>c</u>ription</label>\n            <input type=\"text\" id=\"breakDescription\" onChange={(e)=>setDescription(e.target.value)} value={description}/>\n            <label htmlFor=\"breakDuration\" accessKey=\"d\"><u>D</u>uration</label>\n            <input autoFocus id=\"breakDuration\" type=\"text\" onChange={(e)=>setDuration(parseInt(e.target.value) || 0)} value={duration}/>\n            <button accessKey=\"t\" type=\"submit\">S<u>t</u>art</button>\n            <button accessKey=\"b\" onClick={cancel}><u>B</u>ack</button>\n        </form>\n    )\n}","import React, { useEffect, useState } from 'react';\n\ntype CountdownTimerProps = {\n    end : number,\n    current : number\n}\n\nfunction formatTimeRemaining(totalSecondsRemaining : number) {\n    const pastDue = totalSecondsRemaining < 0;\n    totalSecondsRemaining = Math.abs(totalSecondsRemaining);\n    const minutesRemaining = Math.floor(totalSecondsRemaining / 60);\n    const secondsRemaining = totalSecondsRemaining % 60;\n    const paddedMinutesRemaining = minutesRemaining < 10 ? (\"0\" + minutesRemaining) : (\"\" + minutesRemaining);\n    const paddedSecondsRemaining = secondsRemaining < 10 ? (\"0\" + secondsRemaining) : (\"\" + secondsRemaining);\n    return `${pastDue ? \"-\" : \" \"}${paddedMinutesRemaining}:${paddedSecondsRemaining}`;\n}\n\nexport default function CountdownTimer(props : CountdownTimerProps) {\n    const {end, current} = props;\n    const timeRemaining = formatTimeRemaining(end - current);\n    return (\n        <pre style={{fontSize: 'xx-large'}}>\n            {timeRemaining}\n        </pre>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Activity, ActivityType } from '../App';\nimport './Status.css';\n\ntype StatusProps = {\n    activity: Activity | null\n    currentTime: number\n}\n\nlet favicon = \"\";\nfunction updateFavicon(emoji : string) {\n    if (favicon !== emoji) {\n        favicon = emoji;\n        const iconLink = document.querySelector<HTMLLinkElement>(\"link[rel=icon]\");\n        if (iconLink) {\n            iconLink.href = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${favicon}</text></svg>`\n        } else {\n            console.error(\"Could not find favicon link tag\");\n        }\n    } \n}\n\nlet title = \"\";\nfunction updateTitle(newTitle : string) {\n    if (newTitle !== title) {\n        title = newTitle;\n        document.title = newTitle;\n    } \n}\n\nexport default function Status(props : StatusProps) {\n    const {activity, currentTime} = props;\n    \n    let icon = \"\";\n    if(activity === null) {\n        icon = \"💤\";\n    } else if(activity.scheduledEnd > currentTime) {\n        icon = activity.type === ActivityType.Focus ? \"🤔\" : \"😎\";\n    } else {\n        icon = \"⌛\";\n    }\n    \n    let status = \"\";\n    if(activity === null) {\n        status = \"Idling...\"\n    } else if(activity.type === ActivityType.Break) {\n        status = \"Relaxing...\"\n    } else if(activity.type === ActivityType.Focus) {\n        status = `Focusing on ${activity.goal}...`\n    }\n\n\n    updateFavicon(icon);\n    updateTitle(status);\n    return(\n        <div className=\"Status\">\n            <h1 style={{marginBottom: 0}}>{`${icon} ${title}`}</h1>\n        </div>\n    );\n}","import React, { ReactElement, useEffect, useState } from 'react';\nimport './App.css';\nimport IdleInputs from './components/IdleInputs/index';\nimport CountdownTimer from './components/CountdownTimer';\nimport RunningControls from './components/RunningControls';\nimport Status from './components/Status';\n\nconst POM_MINUTES = 25;\nconst SHORT_BREAK_MINUTES = 5;\nconst LONG_BREAK_MINUTES = 15;\n\n\nexport enum ActivityType {\n  Focus = \"focus\",\n  Break = \"break\" \n};\nexport enum DistractionType { \n  Internal = 'internal',\n  External = 'external'\n};\nexport enum BreakType {\n  Short = 'short break',\n  Long = 'long break'\n};\n\ntype Distraction = {\n  description: string,\n  type: DistractionType\n}\n\nexport type Activity = {\n  start: number,\n  scheduledEnd: number;\n  end: number | null,\n  type: ActivityType,\n  goal?: string,\n  distractions?: Distraction[],\n  tags?: string[]\n}\n\nenum CurrentState {\n  Idling = 'idling',\n  Focusing = 'focusing',\n  Relaxing = 'relaxing',\n};\n\nfunction getUnixTime() : number {\n  return Math.floor(Date.now() / 1000);\n}\n\nfunction minutesToSeconds(minutes : number) {\n  return minutes * 60;\n}\n\nfunction deepCopy<T>(thing: T): T {\n  return JSON.parse(JSON.stringify(thing));\n}\n\nfunction prettifyTimes(key : string, value : any) {\n  if((key === 'start' || key === 'scheduledEnd' || key === 'end') && value) {\n    return (new Date(value * 1000)).toLocaleString();\n  }\n  return value;\n}\n\nlet intervalId : undefined | number = undefined;\n\nfunction App() {\n\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [currentTime, setCurrentTime] = useState(getUnixTime());\n  const [currentActivity, setCurrentActivity] = useState<Activity | null>(null);\n\n  //load from local storage on page load\n  useEffect(()=>{\n    const activitiesJson = localStorage.getItem('activities');\n    if(activitiesJson) {\n      const parsedActivities = JSON.parse(activitiesJson) as Activity[];\n      setActivities(parsedActivities);\n    }\n\n    const currentActivityJson = localStorage.getItem('currentActivity');\n    if(currentActivityJson) {\n      const parsedActivity = JSON.parse(currentActivityJson) as Activity;\n      setCurrentActivity(parsedActivity);\n    }\n  }, []);\n\n  //save activities when updated\n  useEffect(()=>{\n    localStorage.setItem(\"activities\", JSON.stringify(activities));\n  }, [activities]);\n\n  //save currentActivity when updated\n  useEffect(()=>{\n    localStorage.setItem(\"currentActivity\", JSON.stringify(currentActivity));\n  }, [currentActivity]);\n\n  let currentState : CurrentState;\n  if(currentActivity && currentActivity.end === null){\n    switch(currentActivity.type){\n      case ActivityType.Focus:\n        currentState = CurrentState.Focusing;\n        break;\n      case ActivityType.Break:\n        currentState = CurrentState.Relaxing;\n        break;\n      default:\n        console.error(`Unknown activity type: ${currentActivity.type}`);\n        currentState = CurrentState.Idling;\n    }\n  } else {\n    currentState = CurrentState.Idling;\n  }\n\n  // set the internal timer\n  useEffect(() => {\n    if(intervalId === undefined) {\n      intervalId = window.setInterval(()=>{\n        const newTime = getUnixTime();\n        if(newTime > currentTime){\n          setCurrentTime(newTime);\n        }\n      }, 500);\n    }\n    return () => {\n      window.clearInterval(intervalId);\n      intervalId = undefined;\n    };\n  });\n\n  // check that notifications are setup\n  const [checkedNotificationPermissions, setCheckedNotificationPermissions] = useState(false);\n  useEffect(() => {\n    if(!checkedNotificationPermissions) {\n      if(Notification.permission !== \"granted\"){\n        Notification.requestPermission();\n      }\n      setCheckedNotificationPermissions(true);\n    }\n  });\n\n  //send notification if time has expired\n  const [hasNotifiedTimout, setHasNotifiedTimout] = useState(false);\n  useEffect(() => {\n    if(currentState !== CurrentState.Idling && currentActivity && currentTime > currentActivity.scheduledEnd && !hasNotifiedTimout) {\n      new Notification(`${currentActivity.type} time complete`, {requireInteraction: true});\n      setHasNotifiedTimout(true);\n    }\n  });\n\n  //set current activity to focus\n  function startFocus(goal: string, duration: number, tags: string[]){\n    const start = getUnixTime();\n    const scheduledEnd = start + minutesToSeconds(duration);\n    const activity : Activity = {\n      start,\n      end: null,\n      scheduledEnd,\n      goal,\n      tags,\n      type: ActivityType.Focus,\n      distractions: []\n    }\n    setCurrentActivity(activity);\n    setHasNotifiedTimout(false);\n  }\n\n  //set current activity to a break\n  function startBreak(description: string, minutes: number, breakType: BreakType){\n    const start = getUnixTime();\n    const scheduledEnd = start + minutesToSeconds(minutes);\n    const activity : Activity = {\n      start,\n      end: null,\n      scheduledEnd,\n      type: ActivityType.Break,\n      goal: description,\n      tags: [breakType]\n    }\n    setCurrentActivity(activity);\n    setHasNotifiedTimout(false);\n  }\n\n  function addDistraction(description: string, type: DistractionType) {\n    if(!currentActivity) {\n      console.error(\"trying to add a distraction when no activity is in progress\");\n      return;\n    }\n    const activityCopy = deepCopy(currentActivity);\n    if(!activityCopy.distractions) {\n      activityCopy.distractions = [];\n    }\n    activityCopy.distractions.push({\n      description,\n      type\n    });\n    setCurrentActivity(activityCopy);\n  }\n\n  function stopActivity(stopTime: number) {\n    if(!currentActivity) {\n      console.error(\"trying to stop an activity when no activity is in progress\");\n      return;\n    }\n    const activityCopy = deepCopy(currentActivity);\n    const activitiesCopy = Array.from(activities);\n    activityCopy.end = stopTime;\n    activitiesCopy.push(activityCopy);\n    setActivities(activitiesCopy);\n    setCurrentActivity(null);\n  }\n\n  let controls : JSX.Element;\n  switch(currentState) {\n    case CurrentState.Idling:\n      controls = (\n        <IdleInputs\n          startFocus={startFocus}\n          startBreak={startBreak}\n          shortBreakMinutes={SHORT_BREAK_MINUTES}\n          longBreakMinutes={LONG_BREAK_MINUTES} \n        />\n      )\n      break;\n    case CurrentState.Focusing:\n    case CurrentState.Relaxing:\n      controls = <RunningControls addDistraction={addDistraction} stopActivity={stopActivity} />\n      break;\n    default:\n      console.error(`Unsupported currentState: ${currentState}`)\n      controls = <React.Fragment/>\n  }\n\n  let timer : JSX.Element;\n  if(currentActivity && currentState != CurrentState.Idling) {\n      timer = (<CountdownTimer end={currentActivity.scheduledEnd} current={currentTime}/>);\n  } else {\n      timer = ( <CountdownTimer end={0} current={0}/> );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          yapt: yet another pomodoro timer\n        </p>\n      </header>\n      <div className=\"App-body\">\n        <Status activity={currentActivity} currentTime={currentTime}/>\n        <div className=\"Timer-controls\">\n          {timer}\n          {controls}\n        </div>\n        <hr/>\n        <h2>Current Activity</h2>\n        <pre>\n          {JSON.stringify(currentActivity, prettifyTimes, 2)}\n        </pre>\n        <hr/>\n        <h2>Previous Activities</h2>\n        <pre>\n          {JSON.stringify(Array.from(activities).reverse(), prettifyTimes, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}